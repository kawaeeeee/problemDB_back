SQLAlchemyを使用して、既存のテーブルからデータを一覧取得したり、条件に基づいて特定のデータを取得する方法を示します。

データベースから一覧を取得する
例えば、Gradeテーブルからすべてのデータを取得するには、以下のようにします。

python
Copy code
# すべてのGradeを取得
grades = Grade.query.all()

for grade in grades:
    print(f"ID: {grade.id}, Name: {grade.name}")
条件に基づいてデータを取得する
条件に基づいて特定のデータを取得するには、filterやfilter_byメソッドを使用します。

例1: 特定のGradeを名前で取得
python
Copy code
# 名前が"Math"のGradeを取得
grade = Grade.query.filter_by(name="Math").first()

if grade:
    print(f"Found grade: ID: {grade.id}, Name: {grade.name}")
else:
    print("Grade not found")
例2: 特定のSubjectをgrade_idでフィルタリングして取得
python
Copy code
# grade_idが1のSubjectを取得
subjects = Subject.query.filter_by(grade_id=1).all()

for subject in subjects:
    print(f"ID: {subject.id}, Name: {subject.name}, Grade ID: {subject.grade_id}")
例3: 複数の条件でフィルタリングしてProblemを取得
python
Copy code
# Gradeが"10"かつ難易度が"3"のProblemを取得
problems = Problem.query.filter_by(grade="10", difficulty="3").all()

for problem in problems:
    print(f"ID: {problem.id}, Title: {problem.title}, Difficulty: {problem.difficulty}")
データのソートや制限を行う
結果をソートしたり、取得件数を制限することもできます。

例1: Gradeの名前でソート
python
Copy code
# Gradeを名前で昇順にソートして取得
grades = Grade.query.order_by(Grade.name).all()

for grade in grades:
    print(f"ID: {grade.id}, Name: {grade.name}")
例2: Problemの最新5件を取得
python
Copy code
# Problemをupload_dateの降順で並べ、最新の5件を取得
latest_problems = Problem.query.order_by(Problem.upload_date.desc()).limit(5).all()

for problem in latest_problems:
    print(f"ID: {problem.id}, Title: {problem.title}, Upload Date: {problem.upload_date}")
データの取得に関する注意点
.all() は該当するすべての結果をリストで返します。
.first() は最初に見つかった結果を返し、該当するデータがない場合はNoneを返します。
.filter_by() はフィールド名を直接指定してフィルタリングします。
.filter() はより複雑な条件（例えば>や<）を使用したい場合に使います。
これらの方法を使って、SQLAlchemyモデルを通じてデータベースから必要なデータを取得できます。






